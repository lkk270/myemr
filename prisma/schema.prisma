generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Gender {
  MALE
  FEMALE
}

enum HeightUnits {
  FT
  CM
}

enum WeightUnits {
  LBS
  KG
}

enum Unit {
  METRIC
  IMPERIAL
}

enum OrganizationRole {
  ADMIN
  DOCTOR
  PATIENT
  NURSE
}

enum OrganizationType {
  CLINICAL_TRIAL
  CLINIC
  PRIVATE_PRACTICE
}

enum UserRole {
  USER
  ADMIN
  UPLOAD_FILES_ONLY
  READ_ONLY
  READ_AND_ADD
  FULL_ACCESS
}

enum UserType {
  PROVIDER
  PATIENT
}

enum AccountType {
  OAUTH
  CREDENTIALS
}

enum FileStatus {
  NOT_UPLOADED
  SUCCESS
  DELETE_FAILED
}

enum PatientPlan {
  FREE
  PREMIUM_1
  PREMIUM_2
}

enum DoctorPlan {
  FREE
  PREMIUM_1
  PREMIUM_2
}

enum Plan {
  PATIENT_FREE
  PATIENT_PREMIUM_1
  PATIENT_PREMIUM_2
  PROVIDER_FREE
  PROVIDER_PREMIUM_1
  PROVIDER_PREMIUM_2
}

enum InsuranceSide {
  FRONT
  BACK
}

enum AccessCodeValidTime {
  MINUTE_30
  HOUR_1
  HOUR_12
  DAY_1
  WEEK_1
}

enum AccessCodeType {
  UPLOAD_FILES_ONLY
  READ_ONLY
  READ_AND_ADD
  FULL_ACCESS
}

model PatientAddress {
  id       String  @id @default(cuid())
  address  String  @db.LongText
  address2 String? @db.LongText
  city     String  @db.LongText
  state    String  @db.LongText
  zipcode  String  @db.LongText

  patientProfileId String
  PatientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientProfileId])
}

// model ProviderAddress {
//   id       String  @id @default(cuid())
//   name     String
//   address  String
//   address2 String?
//   city     String
//   state    String
//   zipcode  String
//   phone    String?

//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([organizationId])
// }

model OrganizationAddress {
  id       String  @id @default(cuid())
  name     String  @db.VarChar(70)
  phone    String?
  address  String  @db.VarChar(100)
  address2 String? @db.VarChar(100)
  city     String  @db.VarChar(100)
  state    String
  zipcode  String

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model DosageHistory {
  id           String     @id @default(cuid())
  medicationId String
  dosage       String     @db.LongText
  dosageUnits  String     @db.LongText
  frequency    String     @db.LongText
  Medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([medicationId])
}

model Medication {
  id               String          @id @default(cuid())
  name             String          @db.VarChar(500)
  prescribedById   String?         @db.LongText
  prescribedByName String          @db.VarChar(70)
  category         String          @db.LongText
  dosage           String          @db.LongText
  dosageUnits      String          @db.LongText
  frequency        String          @db.LongText
  description      String?         @db.LongText
  status           String          @db.LongText
  dosageHistory    DosageHistory[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  patientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
  patientProfileId String

  @@unique([patientProfileId, name])
  @@index([patientProfileId])
}

// model PatientProfile {
//   id                String  @id @default(uuid())
//   userId            String  @unique
//   firstName         String
//   lastName          String
//   gender            String?
//   dateOfBirth       String?
//   maritalStatus     String?
//   race              String?
//   height            String?
//   weight            String?
//   allergies         String?
//   unit              Unit    @default(IMPERIAL)
//   mobilePhone       String?
//   homePhone         String?
//   insuranceProvider String?
//   policyNumber      String?
//   groupNumber       String?
//   imageUrl          String  @db.Text
//   email             String
//   publicKey         String  @db.Text
//   privateKey        String  @db.Text
//   symmetricKey      String  @db.Text

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   member      Member[]
//   addresses   Address[]
//   medications Medication[]
//   Folder      Folder[]
//   File        File[]
// }

model RecordViewActivity {
  id           Int      @id @default(autoincrement())
  lastViewedAt DateTime @default(now())
  userId       String
  fileId       String?  @unique
  folderId     String?  @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  file         File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  folder       Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([userId, fileId])
  @@unique([userId, folderId])
}

model Folder {
  id            String   @id @default(cuid())
  name          String   @db.VarChar(70)
  path          String   @db.LongText
  namePath      String   @db.LongText
  isFile        Boolean  @default(false)
  isRoot        Boolean  @default(false)
  addedByUserId String?
  addedByName   String   @default("") @db.VarChar(70)
  // Relations
  parentId      String?
  parent        Folder?  @relation("ParentFolder", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subFolders    Folder[] @relation("ParentFolder")

  files              File[]
  recordViewActivity RecordViewActivity[]

  userId           String
  patientProfileId String
  PatientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  patientMember   PatientMember? @relation(fields: [patientMemberId], references: [id])
  patientMemberId String?

  // @@unique([userId, namePath])
  @@index([parentId])
  @@index([patientProfileId])
  @@index([patientMemberId])
}

model InsuranceFile {
  id               String         @id @default(cuid())
  side             InsuranceSide
  uploadedByUserId String?
  uploadedByName   String?        @db.LongText
  type             String
  size             BigInt
  status           FileStatus     @default(NOT_UPLOADED)
  userId           String
  patientProfileId String
  PatientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([side, userId])
  @@unique([side, patientProfileId])
  @@index([patientProfileId])
}

model File {
  id                 String               @id @default(cuid())
  name               String               @db.LongText
  isFile             Boolean              @default(true)
  path               String               @db.LongText
  namePath           String               @db.LongText
  parentId           String
  uploadedByUserId   String?
  uploadedByName     String?              @db.LongText
  type               String?
  size               BigInt
  status             FileStatus           @default(NOT_UPLOADED)
  restricted         Boolean              @default(false)
  folder             Folder               @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recordViewActivity RecordViewActivity[]

  userId           String //of which patient files are for
  patientProfileId String
  PatientProfile   PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)

  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @updatedAt
  requestRecordsCode            RequestRecordsCode?       @relation(fields: [requestRecordsCodeToken], references: [token])
  requestRecordsCodeToken       String?
  patientProfileAccessCode      PatientProfileAccessCode? @relation(fields: [patientProfileAccessCodeToken], references: [token])
  patientProfileAccessCodeToken String?

  @@index([parentId])
  @@index([patientProfileId])
  @@index([requestRecordsCodeToken])
  @@index([patientProfileAccessCodeToken])
}

model DeadFile {
  id               String   @id @default(cuid())
  awsKey           String
  userId           String
  patientProfileId String
  size             BigInt
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model OrganizationTags {
  id             String       @id @default(cuid())
  name           String       @db.VarChar(70)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model Organization {
  id                 String           @id @default(cuid())
  title              String           @db.VarChar(125)
  category           String
  subTitle           String?          @db.Text
  description        String?          @db.Text
  backgroundImageUrl String?          @db.Text
  profileImageUrl    String?          @db.Text
  acceptMessages     Boolean          @default(false)
  organizationType   OrganizationType @default(PRIVATE_PRACTICE)

  addresses        OrganizationAddress[]
  organizationTags OrganizationTags[]

  organizationMembers  OrganizationMember[]
  patients             PatientMember[]
  inviteCodes          OrganizationInviteCode[]
  mainEmail            String?                  @db.VarChar(320)
  mainPhone            String?
  organizationActivity OrganizationActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PatientMemberRole {
  READ_ONLY
  READ_AND_ADD
  FULL_ACCESS
}

//An entire organizatons's memeber status to a patient. All members of the organization have access to the single PatientMember that exists per patient
model PatientMember {
  id   String            @id @default(uuid())
  role PatientMemberRole @default(READ_ONLY)

  // providerProfileId String
  // providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  patientProfileId          String
  patientProfile            PatientProfile @relation(fields: [patientProfileId], references: [id], onDelete: Cascade)
  accessibleRootFolders     Folder[]
  hasAccessToAllRootFolders Boolean        @default(true)
  organizationId            String?
  organization              Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([providerProfileId])
  @@index([patientProfileId])
  @@index([organizationId])
}

enum OrganizationMemberRole {
  ADMIN
  OWNER
  USER
}

model OrganizationMember {
  id     String                 @id @default(uuid())
  role   OrganizationMemberRole @default(USER)
  userId String
  email  String                 @db.VarChar(320)
  user   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // providerProfileId String
  // providerProfile   ProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, userId])
  @@unique([email, organizationId])
  // @@index([providerProfileId])
  @@index([organizationId])
  @@index([userId])
}

model User {
  id                 String               @id @default(cuid())
  name               String?              @db.VarChar(70)
  email              String?              @db.VarChar(320)
  emailVerified      DateTime?
  image              String?              @db.LongText
  password           String?              @db.LongText
  role               UserRole             @default(USER)
  type               UserType             @default(PATIENT)
  patientProfile     PatientProfile?
  // providerProfile    ProviderProfile?
  accountType        AccountType          @default(OAUTH)
  recordViewActivity RecordViewActivity[]
  scheduledToDelete  Boolean              @default(false)

  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  // @@index([twoFactorConfirmationId])
  userSubscription       UserSubscription?
  notifications          Notification[]
  organizationsAMemberOf OrganizationMember[] //uses OrganizationMember because it contains organization and the role

  @@unique([email, type])
}

model PatientProfile {
  id                 String           @id @default(cuid())
  userId             String           @unique
  firstName          String           @db.LongText
  lastName           String           @db.LongText
  email              String           @db.LongText
  imageUrl           String?          @db.LongText
  gender             String?          @db.LongText
  dateOfBirth        String?          @db.LongText
  maritalStatus      String?          @db.LongText
  race               String?          @db.LongText
  height             String?          @db.LongText
  weight             String?          @db.LongText
  allergies          String?          @db.LongText
  unit               Unit             @default(IMPERIAL)
  mobilePhone        String?          @db.LongText
  homePhone          String?          @db.LongText
  insuranceImagesSet Boolean          @default(false)
  insuranceProvider  String?          @db.LongText
  policyNumber       String?          @db.LongText
  groupNumber        String?          @db.LongText
  publicKey          String           @db.Text
  privateKey         String           @db.Text
  symmetricKey       String           @db.Text
  scheduledToDelete  Boolean          @default(false)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  addresses          PatientAddress[]
  medications        Medication[]
  folders            Folder[]
  files              File[]
  insuranceFile      InsuranceFile[]
  organizations      PatientMember[] //uses PatientMember because it contains organization and the role

  @@index([userId])
}

// model ProviderProfile {
//   id                String   @id @default(cuid())
//   userId            String   @unique
//   firstName         String
//   lastName          String
//   email             String   @unique
//   imageUrl          String?
//   publicKey         String   @db.Text
//   privateKey        String   @db.Text
//   scheduledToDelete Boolean  @default(false)
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//   user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   // organizationMembers OrganizationMember[]
//   // patients          PatientMember[]

//   @@index([userId])
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String   @db.VarChar(320)
  userType UserType
  token    String   @unique
  expires  DateTime

  @@unique([email, token, userType])
}

model PasswordResetToken {
  id       String   @id @default(cuid())
  email    String   @db.VarChar(320)
  userType UserType
  token    String   @unique
  expires  DateTime

  @@unique([email, token, userType])
}

model TwoFactorToken {
  id       String   @id @default(cuid())
  email    String   @db.VarChar(320)
  userType UserType
  token    String   @unique
  expires  DateTime

  @@unique([email, token, userType])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model PatientProfileAccessCode {
  id               String              @id @default(cuid())
  patientProfileId String
  userId           String
  validFor         AccessCodeValidTime
  accessType       UserRole
  parentFolderId   String?
  token            String              @unique
  expires          DateTime
  isValid          Boolean             @default(true)
  files            File[]
  createdAt        DateTime            @default(now())
}

model RequestRecordsCode {
  id               String   @id @default(cuid())
  userId           String
  providerEmail    String   @db.VarChar(320)
  parentFolderId   String
  patientProfileId String
  hasUploaded      Boolean  @default(false)
  token            String   @unique
  expires          DateTime
  isValid          Boolean  @default(true)
  files            File[]
  createdAt        DateTime @default(now())
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  plan                   Plan
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FailedRestrictFilesUserId {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  createdAt DateTime @default(now())
}

model FailedAccountDelete {
  id               String   @id @default(cuid())
  userId           String
  patientProfileId String
  reason           String?
  createdAt        DateTime @default(now())
}

model OrganizationActivity {
  id             String                   @id @default(cuid())
  dynamicData    Json
  type           OrganizationActivityType
  read           Boolean                  @default(false)
  imageUrl       String?                  @db.Text
  href           String?                  @db.Text
  organizationId String
  organization   Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

enum OrganizationActivityType {
  PROVIDER_ADDED
  INVITE_ACCEPTED
  ADDED_BY_PATIENT
}

model Notification {
  id               String           @id @default(cuid())
  userId           String
  dynamicData      Json
  notificationType NotificationType
  read             Boolean          @default(false)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum NotificationType {
  ADDED_TO_ORGANIZATION
  ACCESS_CODE_NODE_RENAMED
  ACCESS_CODE_FILE_UPLOADED
  ACCESS_CODE_NODE_MOVED
  ACCESS_CODE_ADDED_ROOT_FOLDER
  ACCESS_CODE_ADDED_SUB_FOLDER
  ACCESS_CODE_MEDICATION_ADDED
  ACCESS_CODE_MEDICATION_EDITED
  REQUEST_RECORDS_FILE_UPLOAD
}

model OrganizationInviteCode {
  id             String                 @id @default(cuid())
  email          String                 @db.VarChar(320)
  role           OrganizationMemberRole @default(USER)
  token          String                 @unique
  expires        DateTime
  organizationId String
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([email, token])
  @@index([organizationId])
}
